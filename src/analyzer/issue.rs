#[derive(Debug, Copy, Clone)]
#[repr(u8)]
pub enum AnalyzerIssueCode {
    NamingConventionViolation = 1,
    NoRequiredParameterAfterOptional = 2,
    DontAwaitInLoop = 3,
    DontDiscardClassInitialization = 4,
    DontDiscardArithmeticOperation = 5,
    DontDiscardComparisonOperation = 6,
    DontDiscardLogicalOperation = 7,
    DontDiscardBitwiseOperation = 8,
    DontDiscardAsyncOperation = 9,
    AssignmentOperationCannotBeUsedForReading = 10,
    DontDiscardTypeOperation = 11,
    DontDiscardVariable = 12,
    DontDiscardConstant = 13,
    DontDiscardAnonymousFunction = 14,
    DontDiscardLiteral = 15,
    DontDiscardArrayInOperation = 16,
    DontDiscardArrayIssetOperation = 17,
    DontDiscardArrayAccessOperation = 19,
    ArrayPushOperationCannotBeUsedForReading = 20,
    DontDiscardStaticPropertyFetchOperation = 21,
    DontDiscardClassConstantFetchOperation = 22,
    DontDiscardStaticMethodClosureCreationOperation = 23,
    DontDiscardFunctionClosureCreationOperation = 24,
    DontDiscardObjectCloneOperation = 25,
    DontDiscardObjectMethodClosureCreationOperation = 26,
    DontDiscardObjectPropertyFetchOperation = 27,
    DontDiscardObjectNullsafePropertyFetchOperation = 28,
    DontDiscardRangeOperation = 29,
    DontDiscardStringConcatOperation = 30,
    TernaryOperationShouldBeAnIfElseStatement = 31,
    TernaryOperationShouldBeAnIfStatement = 32,
    UnreachableCode = 33,
    ExitExpressionCannotBeUsedForReading = 34,
    ThrowExpressionCannotBeUsedForReading = 35,
    InvalidOperandForArithmeticOperation = 36,
    InvalidComparisonOperation = 37,
    InvalidLogicalOperation = 38,
    InvalidBitwiseOperation = 39,
    InvalidTypeOperation = 40,
    InvalidArrayAccessOperation = 41,
    InvalidArrayIssetOperation = 42,
    InvalidArrayPushOperation = 43,
    InvalidStaticPropertyFetchOperation = 44,
    InvalidClassConstantFetchOperation = 45,
    InvalidStaticMethodClosureCreationOperation = 46,
    InvalidFunctionClosureCreationOperation = 47,
    InvalidObjectCloneOperation = 48,
    InvalidObjectMethodClosureCreationOperation = 49,
    InvalidObjectPropertyFetchOperation = 50,
    InvalidObjectNullsafePropertyFetchOperation = 51,
    InvalidRangeOperation = 52,
    InvalidStringConcatOperation = 53,
    InvalidAssignmentOperation = 54,
    InvalidTernaryOperation = 55,
    InvalidExitExpression = 56,
    InvalidThrowExpression = 57,
    InvalidArrayInOperation = 58,
    CannotAssignToUnwriteableExpression = 59,
    CannotReturnFromConstructor = 60,
    CannotReturnFromDestructor = 61,
    NoDuplicateParameter = 62,
    DuplicateClassConstant = 63,
    DuplicateClassProperty = 64,
    DuplicateClassMethod = 65,
    DuplicateClassInterface = 66,
    DuplicateInterfaceMethod = 67,
    DuplicateInterfaceConstant = 68,
    CannotAssignToThis = 69,
    CannotUseThisOutsideOfClassScope = 70,
    CannotUseStaticOutsideOfClassScope = 71,
    CannotUseSelfOutsideOfClassScope = 72,
    CannotUseParentOutsideOfClassScope = 73,
    CannotUseThisAsParameter = 74,
    CannotUseThisAsProperty = 75,
    CannotUseStandaloneBlockStatement = 76,
    CannotUseParentWhenCurrentTypeScopeHasNoParent = 77,
    CannotReturnAValueFromVoidFunction = 78,
    CannotReturnFromNeverFunction = 79,
    MissingParentConstructorCall = 85,
    MissingParentDestructorCall = 86,
    LiteralValueInCondition = 87,
    LoopOnlyLoopsOnce = 88,
    UnsafeFinallyBlock = 89,
    UsingPHPComparisonOperator = 90,
    IncorrectlyCasedKeyword = 91,
    UselessTernaryOperation = 92,
    UselessParenthesesInCondition = 95,
    DefaultCaseShouldBeLast = 96,
    MultipleNamespaceDefinitions = 97,
    DuplicateItemDefinition = 98,
    RedundantUse = 99,
    RedundantUseDefinitionAlias = 100,
    NameAlreadyInUse = 101,
    DuplicateUseDefinitionUnderAlias = 102,
    InvalidGenericArgumentsCount = 103,
    NoMoreParametersAfterVariadic = 104,
    VariadicParameterCannotBeOptional = 105,
    NameIsReservedTypeName = 106,
}

impl ::std::fmt::Display for AnalyzerIssueCode {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "A{:04}", *self as u8)
    }
}

impl From<AnalyzerIssueCode> for String {
    fn from(code: AnalyzerIssueCode) -> String {
        format!("{}", code)
    }
}
