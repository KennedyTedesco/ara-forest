namespace foo;

type Foo = self|static|parent;

interface Http {
    public function foo(): Foo;

    public function bar(): Foo;
}

interface Https extends Http {
    public public public function foo(): Foo;

    public function bar(): Foo;

    public function baz(): parent;
}

class pet {
    static abstract readonly string $name = vec[
        'cat',
        'dog',
        'bird',
    ];
}

readonly class article {
    public readonly string $title; // duplicate readonly

    static string $content; // static + readonly is not allowed
    
    public private readonly string $author; // duplicate visibility

    string $date; // lacks visibility

    public function __construct(
        string $title,
        string $content,
        string $author,
        string $date,
    ) {
        $this->title = $title;
        $this->content = $content;
        $this->author = $author;
        $this->date = $date;
    }
}

// final + abstract is not allowed
final abstract class article2 {
    final static string $content; // final on final is not allowed
    
    public function __construct(
        string $content,
    ) {
        $this->content = $content;
    }
}
